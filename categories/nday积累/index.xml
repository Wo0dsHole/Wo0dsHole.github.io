<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nday积累 on 二进制</title>
    <link>https://Wo0dsHole.github.io/categories/nday%E7%A7%AF%E7%B4%AF/</link>
    <description>Recent content in Nday积累 on 二进制</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jun 2020 15:28:07 +0800</lastBuildDate>
    
	<atom:link href="https://Wo0dsHole.github.io/categories/nday%E7%A7%AF%E7%B4%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CVE-2020-0674</title>
      <link>https://Wo0dsHole.github.io/2020/ie-cve-2020-0674/</link>
      <pubDate>Mon, 08 Jun 2020 15:28:07 +0800</pubDate>
      
      <guid>https://Wo0dsHole.github.io/2020/ie-cve-2020-0674/</guid>
      <description>CVE-2020-0674 Overview 漏洞存在于 IE jscript.dll中，是 2020年初 360和 Google抓到的 0day，也是所谓的 “双星” 漏洞之一。
再此之前的几个月，已经有多次传闻抓到 IE的 Single UAF exploit，但一直没公开样本。
年初分析 VT上的混淆样本后，明白了它由 Single UAF到 RCE的核心思路。 但要把这种技术推广运用，需要逆向更多的 IE 对象细节，也就没有深入。
最近 F-secure的研究员公开了 x64 exploit以及 write-up。其中的分析非常好，很少见到分析得如此透彻的文章。看后便把 x86 exp写了。
这篇 blog作为学习此漏洞过程中的梳理与总结，F-secure中已有内容不再重复。
IE Single UAF to RCE What is &amp;ldquo;write&amp;rdquo;? 此 IE exp最大的亮点在于：它是如何由 Single UAF完成 RCE的？这就涉及到了对 “写” 本质的理解。
“写” 对应于程序语言中的 “赋值”，在编译理论中这样的赋值也被称为 “副作用”（Side Effect）。
程序语言很大程度上是对现实世界的建模，对于副作用（“写”）的理解，《SICP》中一针见血地道出——它是对 “时间” 的模拟。
程序中一个变量x在某一语句被赋值了，那么x在赋值前后便产生了差异，这种差异就体现出了 “时间” 的概念——（赋值前）x ！===（赋值后）x。
Another &amp;ldquo;write&amp;rdquo; 现在的漏洞利用，不论是 windows内核还是浏览器，大都是先达到任意地址读写，即获得 r/w primitive。
但这种写原语并没有展现出上面所说的 “写” 的全貌，它常是直接用于内存中某个已存在的对象，比如去反复修改 Object Head中的字段。</description>
    </item>
    
  </channel>
</rss>